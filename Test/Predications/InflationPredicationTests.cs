using System.Linq;
using System.Threading.Tasks;
using MoneyCheckWebApp.Extensions;
using MoneyCheckWebApp.Predications.InflationPredicating.NeuralNetwork;
using Moq;
using Xunit;

namespace Test.Predications
{
    public class InflationPredicationTests
    {
        private readonly InflationNeuralProvider _nnProvider =  new(new InflationNeuralNetworkProviderConfiguration
        {
            NumHiddenNeurons = 12,
            NumInputsNeurons = 6,
            NumOutputNeurons = 1
        });
        
        private readonly double[] _testWeights =
        {
            1.196402096752237, 0.5664444798292336, -0.17518609888374106, 2.2251462109056876, -1.274273508694913,
            2.0860541028436654, -0.02160937828977406, 0.1152120004889596, 2.5168713245074037, -1.8637111811403129,
            -1.2206950445141918, 0.20783445184009247, 1.0617387240880294, 1.292232035043755, 1.9043208794817488,
            -0.1317892016333613, 0.8362465378906345, -2.06845465290818, 0.6516450059445152, 0.040082371829302216,
            -0.5670008803606087, 1.7573955474525926, -0.9891528020665253, 0.29051779689198853, -1.2531820287829027,
            -0.14241317592005126, -1.9734091235358375, -0.1428572128862694, 1.8890714054026903, 0.37499404591355406,
            0.6503275268009368, 0.0911281513300616, -1.4759486216662405, -0.2868175399303609, 0.36568247346647764,
            -0.165123190685662, -0.4537116003908603, 0.6239744415163122, -0.26588750194034483, -0.25488044101117263,
            -0.9843981873985147, -1.7074303346600597, -1.0813573516629256, 0.17091723599496225, -0.46753950239520414,
            -1.2321550555582101, 1.453714388241732, 0.5199584173224189, -1.0595680669651757, 0.7484423921664256,
            -0.422238256909685, 0.15406073811626245, -0.726447298486621, 0.3017390450246347, 0.5161111508463837,
            -0.0895643081389273, -1.3675455426401248, 1.1802400065211285, -1.6132258364471757, -0.08972743173061655,
            2.441410847378526, 0.7535334693319669, 2.3927782203878727, 0.3095457797004571, 3.0005302079593577,
            -0.7717741607842489, 1.3851514506233154, 0.19336761537127015, 0.7158580229648259, 1.3255850598503942,
            0.8104501180815331, 0.05800010706128055, -1.6697796442945445, -0.9954008279004108, -2.8265912991875743,
            -1.661169548602736, -0.7052097677080963, -0.7122739637782881, 0.021565967005538332, -0.3548758711757219,
            0.7359508510307968, -0.47027472755239724, 0.505394744243337, -0.23079581793828158, -1.3715626460268078,
            0.9095275692822431, 1.496155190188675, 0.9925478272376603, 0.7421333355667944, 1.4530655644361838,
            -1.2943793003180148, -0.23693567577055502, 0.7646046595986257, 0.7286963318913188, 0.7587114183471761,
            -0.11028040587350398, 2.833324849737881
        };

        private readonly double[] _inflationRates =
        {
            0.99, 0.82, 0.96, 1.11, 0.6, 0.17, 0.31, 0.69, 0.74, 0.58, 0.66, 0.78, 0.67, 0.83, 0.71, 0.43, -0.07, -0.04,
            0.35, 0.22, 0.27, 0.83, 0.55, 0.33, 0.4, 0.36, 0.28, 0.13, -0.16, -0.24, 0.2, 0.04, 0.34, 0.29, 0.32, 0.44,
            1.01, 0.84, 0.5, 0.35, 0.16, 0.01, 0.27, 0.49, 0.38, 0.38, 0.29, 0.21, 0.31, 0.42, 0.22, 0.2, -0.15, -0.54,
            0.07, 0.61, 0.37, 0.33, 0.13, 0.22, 0.62, 0.4, 0.44, 0.43, 0.17, 0.01, 0.54, 0.36, 0.41, 0.44, 0.46, 0.63,
            0.96, 0.77, 0.75, 0.74, 0.57, 0.35, 0.8, 0.19, 0.35, 0.46, 1.21, 2.22, 3.85, 2.62, 1.28, 0.82, 0.65, 0.24,
            0.49, 0.62, 0.9, 0.9, 1.02, 0.7, 0.59, 0.51, 0.56, 0.57, 0.21, 0.14, 0.82, 0.42, 0.66, 0.51, 0.34, 0.56,
            0.97, 0.54, 0.34, 0.46, 0.55, 0.1, 1.23, 0.89, 0.52, 0.31, 0.58, 0.37
        };
        
        [Fact]
        public void TrainingTest_Must_Train_Success()
        {
            _nnProvider.TrainNeuralNetwork(new InflationNeuralNetworkTrainingConfiguration()
            {
                InflationRates = _inflationRates
            });
        }

        [Fact]
        public async Task PredicationsTest_Must_Be_More_Then_Previous_Rate()
        {
            var moqWeightsProvider = new Mock<IWeightsProvider>();
            var inflationProvider = new Mock<IAsyncInfliationProvider>();
            
            moqWeightsProvider.Setup(x => x.ProvideWeights()).Returns(() => _testWeights);
            inflationProvider.Setup(x => x.ProvideInflationArrayAsync())
                .Returns(() => Task.FromResult(_inflationRates.GetLastElements(120)));
            
            var result = await _nnProvider.PredictInflationAsync(moqWeightsProvider.Object, inflationProvider.Object, 1);
            
            Assert.True(_inflationRates.Last() < result);
        }
    }
}